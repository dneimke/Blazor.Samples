@page "/forms/extend"
@implements IDisposable



@*<EditForm Model="@contactDetails" OnValidSubmit="@HandleValidSubmit">*@
<EditForm EditContext="@_editContext" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    @*<ValidationSummary />*@

    <div class="form-group row">
        <label for="@nameof(_contactDetails.Name)" class="form-label">Name</label>
        <InputText id="@nameof(_contactDetails.Name)" class="form-control" @bind-Value="@_contactDetails.Name" />
        <ValidationMessage For="@(() => _contactDetails.Name)" />
        <div class="valid-feedback">
            Looks good!
        </div>
    </div>

    <div class="mb-3 form-check">
        <InputCheckbox id="IsOwnerOccupier" class="form-check-input" @bind-Value="@_contactDetails.IsOwner" />
        <label class="form-check-label" for="IsOwnerOccupier">
        Is Owner Occupied
        </label>
    </div>

    <div class="form-group row">
        <label for="Comments" class="form-label">Comments</label>
        <InputTextArea id="Comments" @bind-Value="_contactDetails.Comments" class="form-control" rows="3" aria-describedby="commentsHelp" />
        <div id="commentsHelp" class="form-text">Leave any comments that might be helpful when delivering your package.</div>
    </div>

    <div class="row">
		<div class="col-md-12 text-right">
			<button class="btn btn-primary" type="submit">Submit</button>
		</div>
	</div>

</EditForm>
   


@code {
    ContactDetails _contactDetails = new();
    EditContext _editContext;

    private void HandleValidSubmit()
    {
        _contactDetails = new();
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine(_contactDetails);
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        _editContext.Validate();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_contactDetails);
        _editContext.SetFieldCssClassProvider(new BootstrapStyleProvider());
        _editContext.OnFieldChanged += HandleFieldChanged;
    }

    public void Dispose()
    {
        _editContext.OnFieldChanged -= HandleFieldChanged;
    }
}
